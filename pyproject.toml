[tool.poetry]
authors = [
    "DetachHead <detachhead@users.noreply.github.com>",
    "KotlinIsland <kotlinisland@users.noreply.github.com>",
]
description = "Utilities for basedmypy"
name = "basedtyping"
version = "0.1.3"

[tool.poetry.dependencies]
python = "^3.8"
typing_extensions = "^4.1"

[tool.poetry.group.dev.dependencies]
basedmypy = "^2"
black = "^23"
pytest = "^7"
ruff = "~0.0.289"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.8"]

[tool.mypy]
python_version = 3.8
pretty = true
show_error_context = true
enable_incomplete_feature = "TypeVarTuple"

[tool.black]
target-version = ["py38"]
preview = true
skip-magic-trailing-comma = true

[tool.pytest.ini_options]
addopts = "--import-mode=importlib"
xfail_strict = true

[tool.ruff]
extend-select = [
    "I",
    "UP",
    "PYI",
    "PL",
    "B",
    "PGH",
    "T10",
    "G",
    "A",
    "ERA",
    "ARG",
    "SIM",
    "RET",
#    "N",
    "RUF",
#    "S",
    "ISC",
    "TRY",
    "D",
#    "PT",
    "YTT",
    "ASYNC",
    "BLE",
    "FBT",
    "C4",
    "DTZ",
    "T10",
    "FA",
#    "INP",
    "PIE",
    "G",
    "T20",
    "RSE",
    "RET",
#    "SLF",
    "TID",
    "TCH",
    "PTH",
#    "TD",
    "PD",
    "FLY",
    "NPY",
    "AIR",
    "PERF",
]
ignore = [
    "E501", # Line too long
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "PLR1722", # Use `sys.exit()` instead of `exit`
    "PLW2901", # `for` loop variable overwritten by assignment target
    "PLE0605", # Invalid format for `__all__`, must be `tuple` or `list` (covered by mypy)
    "PLR0911", # Too many return statements
    "PLW0603", # Using the global statement is discouraged
    "PLC0105", # `TypeVar` name does not reflect its covariance
    "PLC0414", # Import alias does not rename original package (used by mypy for explicit re-export)
    "RUF013",  # PEP 484 prohibits implicit Optional (covered by mypy)
    "RUF016",  # Slice in indexed access to type (covered by mypy)
    "TRY002",  # Create your own exception
    "TRY003",  # Avoid specifying long messages outside the exception class
    "D10",     # Missing docstring
    "D203",    # 1 blank line required before class docstring
    "D204",    # 1 blank line required after class docstring (handled by black)
    "D205",    # 1 blank line required between summary line and description
    "D209",    # Multi-line docstring closing quotes should be on a separate line
    "D210",    # No whitespaces allowed surrounding docstring text (conflicts with black when docstring ends with quote (eg. """this is a "quote" """))
    "D212",    # Multi-line docstring summary should start at the first line
    "D213",    # Multi-line docstring summary should start at the second line
    "D400",    # First line should end with a period
    "D401",    # First line should be in imperative mood
    "D403",    # First word of the first line should be properly capitalized
    "D404",    # First word of the docstring should not be `This`
    "D405",    # Section name should be properly capitalized
    "D406",    # Section name should end with a newline
    "D415",    # First line should end with a period, question mark, or exclamation point
    "D418",    # Function/Method decorated with @overload shouldn't contain a docstring (vscode supports it)
    "PT013",   # Found incorrect import of pytest, use simple import pytest instead (only for bad linters that can't check the qualname)
    "TD002",   # Missing author in TODO
    "PGH003",  # Use specific rule codes when ignoring type issues (covered by mypy)
]
respect-gitignore = true
line-length = 100

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.per-file-ignores]
"*.pyi" = ["A001", "A002", "N"] # we don't control names in 3rd party modules
"tests/*" = ["S101"]            # pytest uses assert statements

[tool.ruff.isort]
combine-as-imports = true
required-imports = ["from __future__ import annotations"]
