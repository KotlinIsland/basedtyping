name: check

on: push

jobs:
  check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python-version: "3.8"
            usable-python-version: "3.8"
          - python-version: "3.9"
            usable-python-version: "3.9"
          - python-version: "3.10"
            usable-python-version: "3.10"
          - python-version: "3.11"
            usable-python-version: "3.11"
          - python-version: "3.12"
            usable-python-version: "3.12"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: ./pw poetry config virtualenvs.in-project true
      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv
      - run: ./pw poetry install
      - run: ./pw poetry run mypy -p basedtyping -p tests --python-version ${{ matrix.usable-python-version }}
      - run: ./pw poetry run pytest tests/

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - run: ./pw poetry config virtualenvs.in-project true
      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s ./pw poetry run pip --version || rm -rf .venv
      - run: ./pw poetry install
      - run: ./pw poetry run ruff format --check --diff
      - run: ./pw poetry run ruff check
